# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      IS_CI: true
      Solution_Name: SDK.sln
      Service_csproj: SDK\Service\Service.csproj
      Extractor_csproj: SDK\Extractor\Extractor.csproj
      Client_csproj: SDK\Client\Client.csproj

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Versions
      - uses: dotnet/nbgv@master
        id: rtk_version

      # Publish RTK
      - name: Publish Service
        run: dotnet publish $env:Service_csproj --output publish/RTK /p:Configuration=$env:Configuration /p:Platform=x64 /p:DeployOnBuild=true
        env:
          Configuration: ${{ matrix.configuration }}

      # Upload build artifacts
      - name: Upload RTK artifact
        uses: actions/upload-artifact@v2
        with:
          name: RaidToolkit
          path: publish/RTK

      - name: Upload Extractor artifact
        uses: actions/upload-artifact@v2
        with:
          name: RaidExtractor
          path: publish/Extractor

      # Create releases
      - name: Create RaidToolkit Release
        id: rtk_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.rtk_version.outputs.Version }}
          release_name: RaidToolkit v${{ steps.rtk_version.outputs.Version }}
          body: RaidToolkit v${{ steps.rtk_version.outputs.Version }}
          draft: false
          prerelease: false

      - name: Upload RaidService Asset
        id: upload-raidservice-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rtk_release.outputs.upload_url }}
          asset_path: ./publish/RTK/Raid.Service.exe
          asset_name: Raid.Service.exe
          asset_content_type: application/zip

      - name: Upload TPN Asset
        id: upload-tpn-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rtk_release.outputs.upload_url }}
          asset_path: ThirdPartyNotice.txt
          asset_name: ThirdPartyNotice.txt
          asset_content_type: text/plain

      # - name: Push client package to GitHub registry
      #   run: dotnet nuget push publish/Raid.Client.${{ steps.rtk_version.outputs.Version }}.nupkg -k %PUBLISH_TOKEN% -s https://api.nuget.org/v3/index.json --skip-duplicate
      #   env:
      #     PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
